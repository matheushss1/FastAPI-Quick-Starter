version: '3.9'

volumes:
  pgdata:
    name: api_pgdata
    # persists postgres data against docker-compose down

services:
  backend:
    build:
      # platform: linux/x86_64
      context: .
      args:
        build_environment: development
        service_name: ${API_NAME}
    image: ${API_NAME}
    container_name: ${API_NAME}
    entrypoint: ./entrypoint.sh
    depends_on:
      - database
    environment:
      # app configs
      - API_NAME=${API_NAME}
      - API_DEBUG=${API_DEBUG:-false}
      - PORT=${API_PORT:-80} # CloudRun forces use of $PORT when launching the container
      - TIMEOUT=${API_TIMEOUT:-0} # http request response timeout
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - FRONTEND_URL=${FRONTEND_URL}
      # database configs
      - DB_HOST=${API_DB_HOST} # use the docker-compose service name "database" for container networking during local development
      - DB_USERNAME=${API_DB_USER}
      - DB_PASSWORD=${API_DB_PASSWORD}
      - DB_DATABASE=${API_DB_DATABASE}
      - DB_PORT=${API_DB_PORT}
      # mail configs
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
      - MAIL_STARTTLS=${MAIL_STARTTLS}
      - MAIL_SSL_TLS=${MAIL_SSL_TLS}
      - USE_CREDENTIALS=${USE_CREDENTIALS}
      - VALIDATE_CERTS=${VALIDATE_CERTS}
    ports:
      - ${API_PORT}:${API_PORT}
    volumes:
      - .:/code # more aggressive copy than Dockerfile. This puts all the scripts on the container for local dev
    networks:
      - proxynet

  database:
    # set "database" as app's DB_HOST.
    image: postgres:13
    container_name: ${API_NAME}-db
    restart: always
    command:
      - "postgres"
      - "-c"
      - "max_connections=500"
      - "-p"
      - "${API_DB_PORT}"
    environment:
      - DATABASE_HOST=${API_DB_HOST}
      - POSTGRES_USER=${API_DB_USER}
      - POSTGRES_PASSWORD=${API_DB_PASSWORD}
      - POSTGRES_DB=${API_DB_DATABASE}
    ports:
      - ${API_DB_PORT}:${API_DB_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - proxynet

networks:
  proxynet:
    name: api-network
